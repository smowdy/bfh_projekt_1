@startuml
package "Unity Scenes" <<Rectangle>>{
    hide members
    Class MainScene
    Class MenuScene
    Class GameOverScene
    Class GameCompleteScene
    }

package "Unity GameObjects" <<Rectangle>> {
    hide members
    Class Weapon
    Class Player
    Class Enemy
    Class Projectile
    Class Asteroid
    Class Goal
    Class UI
}

package "Behaviours and Controllers" <<Rectangle>> {
    abstract Class MonoBehaviour{
    - void Start()
    - void Awake()
    - void Update()
    }
    Class DestructibleObjectController{
        - float maxHealthpoints
        - float currentHealtpoints
        + float GetCurrentHealthpointsNormalized()
        - void OnTriggerEnter(Collider other)
        + void TakesDamage(float amount)
        - void CheckIfDestroyed()
        + void DestroyThisObject()
        - void DamageOtherOnCollision(DestructibleObjectController destructible)
    }
    Class SpaceShipController{
        - float maxSpeed
        - float turnSpeed
        - float acceleration
        - float velocity
        - Rigidbody rb
        - void FixedUpdate()
        - void OnTriggerStay(Collider other)
        - void UpdateRigidBody()
        - void AccelerateTo(float destSpeed)
        - void Turn(float direction)
        - void Turn(Vector3 direction)
        - void Turn(Quaternion targetRotation)
        - void Thrust(float direction)
        -void ResetVelocityOnCollision(Transform other)
    }
    Class PlayerController{
        - void Turn()
        - void Thrust()
        - void DestroyThisObject()
    }
    Class EnemyController{
        - GameObject target
        - float engageDistance
        - float obstacleDetectionDistance
        - float obstacleRayCastWidth
        - EnemyState state
    }
    Class WeaponController{
        - GameObject projectilePrefab
        - Transform[] projectileSpawns
        - Transform parentTransform
        - float shotsPerSecond
        - float turnDegreePerSecond
        - float maxTurnDegree
        - float maxAngleDeltaToShoot
        - float nextShotAt
        - int lastUsedProjectileSpawn
        - Vector3 lastAimedDirection
        - Quaternion initialRotation
        - void Aim(Vector3 direction)
        - void TryShoot(string shotBy)
        - Quaternion GetLimitedRotation(Quaternion targetRotation)
        - Quaternion GetInitialRelativeRotation()
        - bool CanShoot()
        - Transform GetNextProjectileSpawn()
    }
    Class EnemyWeaponController{
        - float engageDistance
        - Transform target
        - void AimAndTryShoot()
    }
    Class PlayerWeaponController{
        - void AimToCursorPosition()
        - void HandleShootInput()
    }
    Class ProjectileController{
        - float speed
        - float damage
        - float lifetimeInSec
        - string shotBy
        - float launchTime
        - void OnTriggerEnter(Collider other)
        - void Move()
    }
    Class GoalController{
        - void OnTriggerEnter(Collider other)
    }
    Class UiController{
        -GameObject crosshair
        -GameObject bar
        -PlayerController playerController
        -void SetCrosshairPosition()
        -void SetHealthbarSize(float sizeNormalized)
    }
    Class MainMenuController{
        - string sceneNameToLoad
        + void StartGameClicked()
    }
    Class SpawnManager{
        - GameObject asteroidPrefab
        - GameObject enemyPrefab
        - string enemySpawnPointTag
        - string asteroidSpawnPointTag
        - string enemyClusterPointTag
        - int enemyAmountPerCluster
        - int enemySafeDistancePerCluster
        - int enemyMaxRangePerCluster
        - string asteroidClusterPointTag
        - int asteroidAmountPerCluster
        - int asteroidSafeDistancePerCluster
        - int asteroidMaxRangePerCluster
        - int enemyAmmountSpawnedArroundCenter
        - int asteroidAmmountSpawnedArroundCenter
        - int maxDistToSpawnRandomArroundCenter
        + void SpawnRandom(GameObject gameObject, int amount, int safetyDistance, int maxRange)
        + void SpawnRandom(GameObject gameObject, Vector3 center, int amount, int safetyDistance, int maxRange)
        + void Spawn(GameObject gameObject, Vector3 spawnPos)
        + void Spawn(GameObject gameObject, string tag)
        + void SpawnCluster(GameObject gameObject, string tag, int amount, int safetyDistance, int maxRange)
        - Vector3 getSpawnPosition(int maxRange)
        - Vector3 getSpawnPosition(Vector3 center, int maxRange)
        - bool IsValidSpawnPos(Vector3 spawnPos, int safetyDistance)
        - bool IsNotInReachOf(Vector3 spawnPos, string tag, int safetyDistance)
    }
    Class DestructionAnimator{
        - GameObject destructionParticleSystem
        + void Play()
    }
    Class CameraController{
        - Rigidbody playerObject
        - float cameraSpeed
        - void FixedUpdate()
        - void Move(float deltaTime)
    }
    Class AsteroidController{
        - Vector3 rotationSpeed
        - int minScaleChange
        - int maxScaleChange
        - int minRotation
        - int maxRotation
        - float getRotationAxysValue()
        - int getRandomScaleChange()
    }
    Class BoundryBehaviour{
        - float damagePerGameTick
        - List<DestructibleObjectController> objectsOutsideBoundry
        - void FixedUpdate()
        - void DamageObjectsOutsideBoundry()
        - void OnTriggerEnter(Collider other)
        - void OnTriggerExit(Collider other)
    }
}

package "State" <<Rectangle>> {
    Class EnemyState {
        - GameObject enemy
        - float engageDistance
        + EnemyState(GameObject Enemy, float engageDistance)
        + EnemyState Action(GameObject target)
    }
    Class EnemyIdleState{
        - float turnDirection
        - float nextDirectionUpdateAt
        - void SetRandomDirection()
        - void SetTurnDirection(Transform enemyTransform, EnemyController enemyController)
    }
    Class EnemyEngageState{
        - float nextDirectionUpdateAt
        - Vector3 currentDirection
        - Vector3 GetDirection(Vector3 targetPosition)
    }
}

PlayerController -up-|> SpaceShipController
EnemyController -up-|> SpaceShipController
SpaceShipController -up-|> DestructibleObjectController
GoalController -up-|> MonoBehaviour
WeaponController -up-|> MonoBehaviour
EnemyWeaponController -up-|> WeaponController
PlayerWeaponController -up-|> WeaponController
ProjectileController -up-|> MonoBehaviour
UiController -up-|> MonoBehaviour
DestructibleObjectController -up-|> MonoBehaviour
MainMenuController -up-|> MonoBehaviour
DestructionAnimator -up-|> MonoBehaviour
SpawnManager -up-|> MonoBehaviour
CameraController -up-|> MonoBehaviour
AsteroidController -up-|> MonoBehaviour
BoundryBehaviour -up-|> MonoBehaviour
EnemyIdleState -up-|> EnemyState
EnemyEngageState -up-|> EnemyState

Asteroid *-up- AsteroidController
Player *-up- PlayerController
Enemy *-up- EnemyController
Weapon *-up- WeaponController
Projectile *-up- ProjectileController
WeaponController *-up- Projectile
Goal *-up- GoalController
UI *-up- UiController

MainScene -up- "1" Player
MainScene -up- "0...n" Enemy
MainScene -up- "0...n" Weapon
MainScene -up- "0...n" Projectile
MainScene -up- "0...n" Asteroid
MainScene -up- "1" Goal
MainScene -up- "1" UI

@enduml